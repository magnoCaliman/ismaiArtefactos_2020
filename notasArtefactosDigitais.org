* AULA 01 - 18/FEV

** Hardware Hacking / Circuit Bending
- Laying of hands
  - https://www.youtube.com/watch?v=-l5EhwsXUGg

- Reed Ghazala, the Father of Circuit Bending
  - https://www.youtube.com/watch?v=KHDL9iGxDPM
- Intro to Circuit Bending
  - https://www.youtube.com/watch?v=kJfTdD_5XyE
- Circuit Bent Trumpet
  - https://www.youtube.com/watch?v=3LtOalTAVGw

** Manufatura de dispositivos
- Microfones indutores
  - https://www.youtube.com/watch?v=4T7qkYY7LZM
- Christina Kubisch - Electrical Walks
  - https://vimeo.com/54846163

- Microfones piezos
  - https://www.youtube.com/watch?v=FOfEsUTZRK0

** Arduino
- https://www.arduino.cc/
- http://www.instructables.com/id/Arduino-Line-Follower-Robot-1/
- http://www.instructables.com/id/Use-an-Accelerometer-and-Gyroscope-with-Arduino/
- http://www.instructables.com/id/coin-slot-detector/
- https://www.youtube.com/watch?v=Z86V_ICUCD4
- https://www.youtube.com/watch?v=Nqk_nWAjBus
- http://www.instructables.com/id/Twitter-Controlled-Pet-Feeder/
- http://www.instructables.com/id/Singing-plant-Make-your-plant-sing-with-Arduino-/
- https://www.youtube.com/watch?v=JCiXV6b7N0A&list=UU4u0V-G5KTeWF5hnubp-lrA&index=9&feature=plcp

** Links extras vistos em sala
- Suicide shower
  - https://duckduckgo.com/?q=suicide+shower&iax=images&ia=images
- Protoboard
  - https://duckduckgo.com/?q=protoboar+populated&iax=images&ia=images
- Chromium
  - https://www.chromium.org/
- Gameduino
  - https://duckduckgo.com/?q=gameduino&t=ffab&iax=images&ia=images
- Arduinos no AliExpress
  - https://www.aliexpress.com/wholesale?catId=0&initiative_id=SB_20200218113532&SearchText=arduino
- Raspberry Pie
  - https://www.raspberrypi.org/
  - https://duckduckgo.com/?q=raspberry+pie+computer&t=ffab&iar=images&iax=images&ia=images&iai=https%3A%2F%2Fwww.raspberrypi.org%2Fmagpi%2Fwp-content%2Fuploads%2F2017%2F04%2FRaspberry-Pi-3.jpg

    
* AULA 02 - 03/MAR

Capítulos 11, 12 e 13 em /COLLINS, N - Handmade Electronic Music/

- Circuit Bending
  - https://www.youtube.com/watch?v=TjbGSgCopNk

- Laying of Hands
  - https://www.youtube.com/watch?v=-l5EhwsXUGg

** Links extras vistos em aula
- 10.000 volts wood burning
  - https://www.youtube.com/watch?v=PFMo5aicurc

- Van de Graff Generator
  - https://www.youtube.com/watch?v=3Ptu07enIsY



* AULA 03 - 10/MAR

Capítulo 4 e 5 em /COLLINS, N - Handmade Electronic Music/

- Jumping Speaker
  - https://www.youtube.com/watch?v=6ZxxuDNQuMQ

- Exemplos:
  - https://photos.google.com/photo/AF1QipMR_9pvqfQyWJxEL9dY8DLsAV67I91gj9ThfWFI
  - https://photos.google.com/photo/AF1QipNb_L_dtvkEOY_5CKkPuzCuumpv-AP-VvMnpK3j

** Links extras vistos em sala

- Electron microscope on vynil LP
  - https://www.youtube.com/watch?v=GuCdsyCWmt8

- How speakers make sound
  - https://animagraffs.com/loudspeaker/

- Fun with a 9V batteries. (244 of them)
  - https://www.youtube.com/watch?v=8hwLHdBTQ7s

- Carreta Treme Treme
  - https://www.youtube.com/watch?v=RpT-h5tPYdw
  - https://www.youtube.com/watch?v=h8f8dH7q_sU
  - https://www.youtube.com/watch?v=0fKMOY-Brd8


* AULA 04 - 17/MAR

- Simulador online de Arduino em:
  - https://www.tinkercad.com/

** Links extras vistos em aula
- Fresadora (CNC Router)
  - https://www.google.com/search?tbm=isch&q=cnc%20router&tbs=imgo:1

- Impressora 3D
  - https://www.youtube.com/watch?v=FqQAjkZOBeY

- Geiger Counter feito com Arduino
  - https://www.cooking-hacks.com/documentation/tutorials/geiger-counter-radiation-sensor-board-arduino-raspberry-pi-tutorial

- Detector de mealheiro
  - https://www.instructables.com/id/coin-slot-detector/


* AULA 05 - 24/MAR

- Touchless Hand Sanitizer Dispenser
  - https://www.facebook.com/watch/?v=218900009494708

** Blink

Ex.1 - Blink - https://www.tinkercad.com/things/3jdGRZLhdex 
#+BEGIN_SRC c
void setup()
{
  pinMode(7, OUTPUT);     //configura pino 7 como SAÍDA de tensão
}

void loop()
{
  digitalWrite(7, HIGH);  //LIGA pino (envia tensão elétrica)
  delay(500);             //interrompe momentâneamente o ciclo do void loop()
  digitalWrite(7, LOW);   //DESLIGA pino
  delay(500);             
}
#+END_SRC

** Protoboard

- /Rocha, H - Introdução à Eletrônica Para Artistas - p.31/
  - Ex.2 - Protoboard - https://www.tinkercad.com/things/ktwF407CHEB 
#+BEGIN_SRC c
void setup()
{
  pinMode(7, OUTPUT)
}

void loop()
{
  digitalWrite(7, HIGH);
  delay(500);
  digitalWrite(7, LOW);
  delay(300);
}
#+END_SRC

- /Banzi, M - Make - Getting started with Arduino - p.42/
  - Ex.3 - Ground compartilhado -  https://www.tinkercad.com/things/7jYMC8PHA21 
#+BEGIN_SRC c
void setup()
{
  pinMode(12, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(2, OUTPUT);
}

void loop()
{
  digitalWrite(12, HIGH);
  digitalWrite(4, HIGH);
  digitalWrite(2, HIGH);
}
#+END_SRC

- /Experimento 1: construir um circuito (usando a protoboard) onde um ou mais botões são usados para ligar/desligar componentes que já vimos: leds, motores ou colunas (no tinkercad, "piezos")./
- Possível solução:  https://www.tinkercad.com/things/5b7xva4baRr 
  - Pergunta: nessa solução, há diferença conectar o positivo do motor /antes/ do botão?

** Funções & Argumentos

- Funções vistas até o momento: ~pinMode()~, ~digitalWrite()~ e ~delay()~
- Como descobrir quais os argumentos dessas funções? RTFM: https://www.arduino.cc/reference/en/

*** ~tone()~

 - Documentação: https://www.arduino.cc/reference/en/language/functions/advanced-io/tone/

 - Ex.4 - Tone -  https://www.tinkercad.com/things/goaXcc7SD0w 
 #+BEGIN_SRC c
 void setup()
 {
   pinMode(5, OUTPUT);
 }

 void loop()
 {
   tone(5, 100);
 }
 #+END_SRC

 - Ex.5 - Tone (3 argumentos) -  https://www.tinkercad.com/things/l9MI9pnko2L
 #+BEGIN_SRC c
 void setup()
 {
   pinMode(5, OUTPUT);
 }

 void loop()
 {
   tone(5, 100, 250);
   delay(1000); //agora com três argumentos
 }
 #+END_SRC

 - Ex.6 - Tone (sequenciador) -  https://www.tinkercad.com/things/ism9S9i4ulI
 #+BEGIN_SRC c
 void setup()
 {
   pinMode(5, OUTPUT);
 }

 void loop()
 {
   tone(5, 100, 90);
   delay(150);
   tone(5, 200, 90);
   delay(150);
   tone(5, 300, 90);
   delay(150);
   tone(5, 400, 90);
   delay(150);
 }
 #+END_SRC


** Links extras vistos em aula:
- Exemplo de sequenciador: abertura Stranger Things
  - https://www.youtube.com/watch?v=-RcPZdihrp4


* AULA 06 - 31/MAR

** ~random()~

- Documentação: https://www.arduino.cc/reference/en/language/functions/random-numbers/random/

- Ex.6 - blinkRandom - https://www.tinkercad.com/things/6MLM7S6X0Tb 
#+BEGIN_SRC c
void setup()
{
  pinMode(7, OUTPUT);
}

void loop()
{
  digitalWrite(7, HIGH);
  delay(random(100, 1000));
  digitalWrite(7, LOW);
  delay(500);
}
#+END_SRC

- Ex.7 - toneRandom - https://www.tinkercad.com/things/b02258ngUu4 
#+BEGIN_SRC c
void setup()
{
  pinMode(5, OUTPUT);
}

void loop()
{
  tone(5, random(100, 800));
  delay(200);
}
#+END_SRC

- Pergunta: é randômico de verdade? O que é o "pseudo-random" mencionado na documentação?

** Funções como argumento de outras funções & Modularidade
#+BEGIN_SRC c
void setup()
{
  pinMode(5, OUTPUT);
}

void loop()
{
  digitalWrite(5, HIGH);
  delay(distanciaEntrePessoas()); // isso poderia existir!
  digitalWrite(5, LOW);
  delay(distanciaEntrePessoas());
}

void distanciaEntrePessoas()
{
  // muitas linhas de código!
}
#+END_SRC

- Ou algo como: https://blog.arduino.cc/2020/03/10/this-pair-of-arduino-glasses-stops-you-from-touching-your-face/

** Variáveis

- /Experimento 2: reproduzir o comportamento desse circuito:  https://www.tinkercad.com/things/djHUEO9MFJB/

*** O que é / para que serve?

- Resumão: https://www.arduino.cc/en/Tutorial/Variables

- ~int x = 10~ -> Dissecando as 4 partes do uso de uma variável *no Arduino*:
  - ~int~ -> tipo de dado (data type)
  - ~x~ -> nome
  - ~=~ -> atribuição de valor
  - ~10~ -> valor

- Ex.8 - Blink com variável -  https://www.tinkercad.com/things/1c6hEqOfAHP 
#+BEGIN_SRC c
int pinoLed = 7;
int tempoDelay = 500;
  
void setup()
{
  pinMode(pinoLed, OUTPUT);     
}

void loop()
{
  digitalWrite(pinoLed, HIGH);  
  delay(tempoDelay);             
  digitalWrite(pinoLed, LOW);   
  delay(tempoDelay);             
}
#+END_SRC

- Ex.9 - Tone sequenciador com variável -  https://www.tinkercad.com/things/jIMzNe9eevD 
  - Código é para o computador rodar, mas para o progamador ler!
#+BEGIN_SRC c
void setup()
{
  pinMode(5, OUTPUT);
}

void loop()
{
  tone(5, 100, 90);
  delay(150);
  
  tone(5, 200, 90);
  delay(150);
  
  tone(5, 300, 90);
  delay(150);
  
  tone(5, 400, 90);
  delay(150);
}

// onde estão as redundâncias nesse código
// que podem ser substituídas por variáveis?
#+END_SRC

- Ex.10 - Variando variáveis -  https://www.tinkercad.com/things/iMLDtoDSjwc 
#+BEGIN_SRC c
int pinoLed_R = 5;
int pinoLed_G = 6;
int pinoLed_B = 7;
int tempoDelay = 500;

void setup()
{
  pinMode(pinoLed_R, OUTPUT);
  pinMode(pinoLed_G, OUTPUT);
  pinMode(pinoLed_B, OUTPUT);
}

void loop()
{
  digitalWrite(pinoLed_R, HIGH);
  delay(tempoDelay);
  digitalWrite(pinoLed_G, HIGH);
  delay(tempoDelay * 2);
  digitalWrite(pinoLed_B, HIGH);
  delay(tempoDelay * 0.5); // multiplicar por 0.5 é o mesmo que dividir por 2 
  
  digitalWrite(pinoLed_R, LOW);
  digitalWrite(pinoLed_G, LOW);
  digitalWrite(pinoLed_B, LOW);
  delay(tempoDelay);
  
  tempoDelay = random(500, 2000);
}
#+END_SRC

** TPC
- Resolva o Experimento 2
- Crie algum circuito livre usando ~random()~ e variáveis


* AULA 07 - 14/ABR

** Comunicação serial
- Partindo do Exemplo 10, temos ~tempoDelay = random(500, 2000);~
- Como podemos ver esse valor?
- Ex.11 - Serial - https://www.tinkercad.com/things/0z6Eyd4p9ga 
- Documentação - https://www.arduino.cc/reference/en/language/functions/communication/serial/
#+BEGIN_SRC c
int valorRandomico;

void setup()
{
  Serial.begin(9600);
}

void loop()
{
  valorRandomico = random(100, 500);
  
  //Serial.print("O numero sorteado foi: ");
  Serial.println(valorRandomico);
  
  delay(1000);
}
#+END_SRC

- Atenção para a sintaxe!
- "Dot notation" -> ~Colecao.funcao(argumento)~
- Nem sempre é assim. Outras linguagens vão permitir coisas como ~[1, 2, 3, 4, 5].choose~. Mas não o Arduino.

** ~digitalRead()~
- Documentação: https://www.arduino.cc/reference/en/language/functions/digital-io/digitalread/

- Ex.12 - digitalRead -  https://www.tinkercad.com/things/a7Pzmrh2WYs 
#+BEGIN_SRC c
void setup()
{
  pinMode(5, INPUT);
  Serial.begin(9600);
}

void loop()
{
  Serial.println(digitalRead(5));
  
  delay(1000);
}
#+END_SRC

- /Experimento 3: imprima no monitor serial a leitura de dois pinos, onde um está conectado à 5V, e outro não está conectado à nada. Qual a diferença de leitura?/ 
  - Possível solução:  https://www.tinkercad.com/things/4nBS2eLmEqt 

- Ex.13 - leituraBotao -  https://www.tinkercad.com/things/bMUTLstkbb4 
#+BEGIN_SRC c
int pinoBotao = 2;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  Serial.println(estadoBotao);
  delay(100);
}
#+END_SRC

- Pergunta: qual a diferença de circuito entre o botão nesse exemplo, e os usos que vinhamos fazendo até agora?

** ~if()~

- Faz um teste /booleano/ e /condiciona/ a execução de um bloco de código à esse teste.

#+BEGIN_SRC c
if (teste)
{
  //bloco de código que é avaliado se 
  //a condição do teste for verdadeira
}
#+END_SRC

- Ex.14 - ligaLed_botao -  https://www.tinkercad.com/things/5jpQ2PtByJq 
#+BEGIN_SRC c
int pinoBotao = 2;
int pinoLed = 13;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  pinMode(pinoLed, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  if (estadoBotao == 1)
  {
    digitalWrite(pinoLed, HIGH);
  }
//  else
//  {
//  	digitalWrite(pinoLed, LOW);
//  }
  
  Serial.println(estadoBotao);
  delay(50);
}
#+END_SRC

- Lembrando os operadores de comparação:
#+BEGIN_SRC c
x == y (x is equal to y)
x != y (x is not equal to y)
x <  y (x is less than y)
x >  y (x is greater than y)
x <= y (x is less than or equal to y)
x >= y (x is greater than or equal to y)
#+END_SRC
Referência: https://www.arduino.cc/reference/en/language/structure/control-structure/if/

- Ex. 15 - Contador -  https://www.tinkercad.com/things/4kdTHqHBg7d 
#+BEGIN_SRC c
int pinoBotao = 2;
int contador = 0;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  
  if (estadoBotao == HIGH)
  {
    contador = contador + 1;
  }
  
  Serial.println(contador);
  
  delay(100);
}
#+END_SRC

** TPC
- Crie um circuito onde um LED possui um timer de desligamento: ao apertar um botão o LED acende, e após 3 segundos, desliga.
  - Variação possível: crie um semáforo: 3 LEDs (vermelho, amarelo e verde) controlados por um único botão.

- Usando piezos e botões, crie um pequeno piano, onde cada botão produz um som diferente.

- Crie algum circuito livre utilizando condicionais ~if()~ e a leitura de pinos digitais.
  
*** Desafio extra:
- Crie um circuito onde ao apertar um botão um LED acende /e permanece acesso/, e ao apertar de novo, o LED apague.


* AULA 08 - 21/ABR

** ~millis()~
- Documentação: https://www.arduino.cc/reference/en/language/functions/time/millis/

- Função que retorna um valor, em /millisegundos/, que marca a quanto tempo o programa está sendo executado no Arduino.
- Lembrando: 1000 millisegundos == 1 segundo.

- Ex.16 - millis() - https://www.tinkercad.com/things/0acHit8WMhY 
#+BEGIN_SRC c
//int tempo;
unsigned long tempo;
  
void setup()
{
  Serial.begin(9600);
}

void loop()
{
  tempo = millis();
 
  Serial.println(tempo);
  
  delay(100);
}
#+END_SRC

- Variáveis do tipo ~int~ tem um limite máximo de tamanho. A "caixa" só consegue guardar números entre -32.768 e 32.767. (https://www.arduino.cc/reference/en/language/variables/data-types/int/)
- Se usamos uma variável do tipo ~int~ para armazenar valor de ~millis()~, em pouco mais de 30 segundos a variável chega em seu valor máximo, e temos um problema de /stack overflow/: o valor dentro da variável "transborda" depois de 32.767, e pula para o valor mínimo.
  - No Ex.16, experimente trocar o tipo da variável ~tempo~ e observe o monitor serial.

- Como evitar:
  - Usar uma "caixa" que comporta valores maiores. Mudar tipo da variável ~tempo~ para ~long~, capaz de armazenar valores entre -2.147.483.648 e 2.147.483.647 (https://www.arduino.cc/reference/en/language/variables/data-types/long/)

- ~millis()~ é um contador de tempo, começa contagem do zero, portanto nunca tem valores negativos. Usa-se então um /qualificador/ ao início da declaração da variável para especificar que aquela variável agora só comporta valores positivos. ~unsigned~ = "sem sinal". (https://www.arduino.cc/reference/en/language/variables/data-types/unsignedlong/)
  - Observe: agora a variável ~unsigned long tempo~ pode comportar valores entre 0 e 4.294.967.295. Seu tamanho é o mesmo de antes, o /âmbito/ é que foi transposto para o universo dos números positivos.

- Ex.17 - blink_if - https://www.tinkercad.com/things/07l1cmCVVjO
#+BEGIN_SRC c
int pinoLed = 13;
int estadoLed = HIGH;

void setup()
{
  Serial.begin(9600);
  pinMode(pinoLed, OUTPUT);
}

void loop()
{
  Serial.print("estadoLed antes do if: ");
  Serial.println(estadoLed);
  
  digitalWrite(pinoLed, estadoLed);
  	
   if (estadoLed == HIGH)
   {
     estadoLed = LOW;
   }
   else
   {
     estadoLed = HIGH;
   }
  
   Serial.print("estadoLed depois do if: ");
   Serial.println(estadoLed);
  	
   delay(2000);
}
#+END_SRC

- Piscagem de um LED (como Ex.1 - Blink), mas sem valores /hardcoded/ ~HIGH~ e ~LOW~ em duas chamadas para a função ~digitalWrite()~.
- Agora cria-se lógica onde através da variável ~estadoLed~ monitora-se o estado /booleano/ do Led ("está acesso ou apagado?").
- Desafio: depois de ler a documentação do /operador lógico NOT/ (https://www.arduino.cc/reference/en/language/structure/boolean-operators/logicalnot/), você é capaz de reescrever o Ex.17 sem usar nenhum ~if()~, mas ainda com apenas um ~digitalWrite()~?

** Blink sem ~delay()~

- Ex.18 - blinkSemDelay -  https://www.tinkercad.com/things/3RZ8sFVXgCy
#+BEGIN_SRC c
int pinoLed = 13;
int intervalo = 1000;
int tempoAnterior = 0;
int estadoLed = HIGH;
int tempoAtual;

void setup()
{
  Serial.begin(9600);
  pinMode(13, OUTPUT);
}

void loop()
{
  tempoAtual = millis();
  
  if (tempoAtual - tempoAnterior > intervalo)
  {
    digitalWrite(pinoLed, estadoLed);
    
    if (estadoLed == HIGH)
    {
   	estadoLed = LOW;
    }
    else
    {
  	estadoLed = HIGH;
    }

    Serial.print("entrou no if. estadoLed = ");
    Serial.println(estadoLed);
    
    tempoAnterior = tempoAtual;
  }
}
#+END_SRC

- Perguntas:
  - Qual a ordem de execução das expressões na linha ~if (tempoAtual - tempoAnterior > intervalo)~?
  - O que a linha ~tempoAnterior = tempoAtual~ faz?
** TPC
- Crie um circuito onde um LED pisca a cada três segundos, e ao mesmo tempo seja possível printar no monitor serial o estado de um botão. 


* AULA 09 - 28/ABR

** Outros sensores digitais

*** PIR - Passive Infrared Sensor

- Wikipedia: https://en.wikipedia.org/wiki/Passive_infrared_sensor
  - "The term passive refers to the fact that PIR devices do not radiate energy for detection purposes. They work entirely by detecting infrared radiation (radiant heat) emitted by or reflected from objects"

- Adafruit: https://learn.adafruit.com/pir-passive-infrared-proximity-motion-sensor/how-pirs-work

- Ex.19 - PIR - https://www.tinkercad.com/things/ihpFUm9DJF3 
#+BEGIN_SRC c
int pinoLED = 7;
int pinoSensor = 9;
int valorSensor;

void setup()
{
  Serial.begin(9600);
  
  pinMode(pinoSensor, INPUT);
  pinMode(pinoLED, OUTPUT);
}

void loop()
{
  valorSensor = digitalRead(pinoSensor);
  Serial.println(valorSensor);
  
  if (valorSensor == HIGH)
  {
  	digitalWrite(pinoLED, HIGH);
  }
  else
  {
  	digitalWrite(pinoLED, LOW);
  }

  delay(100);
}
#+END_SRC

- Em geral sensores PIR necessitam de alimentação de energia em dois pinos ("/power/" e "/ground/" no Tinkercad), e possuem um terceiro pino ("/signal/") que alterna entre 0V e algum valor positivo de tensão quando detecta movimento. Esse é o pino que deve ser lido pelo Arduino.

*** Tilt Switch

- Tipos de sensores de inclinação: http://blog.vidianindhita.com/2018/02/27/all-about-tilt-switches/

- Ex.20 - tiltSwitch - https://www.tinkercad.com/things/9EcdwRmgLSX  
#+BEGIN_SRC c
int pinoLED = 7;
int pinoSensor = 9;
int valorSensor;

void setup()
{
  Serial.begin(9600);
  
  pinMode(pinoSensor, INPUT);
  pinMode(pinoLED, OUTPUT);
}

void loop()
{
  valorSensor = digitalRead(pinoSensor);
  Serial.println(valorSensor);
  
  if (valorSensor == HIGH)
  {
  	digitalWrite(pinoLED, HIGH);
  }
  else
  {
  	digitalWrite(pinoLED, LOW);
  }

  delay(100);
}
#+END_SRC

- Importante: o terminal do sensor de inclinação que é lido pelo Arduino precisa de um resistor conectando esse terminal ao GND. 

- Perceba que o código do Ex.20 é idêntico ao Ex.19. A lógica do algoritmo é a mesma: ler o estado de um sensor booleano (~HIGH~ ou ~LOW~) através de um pino digital, e guardar esse estado em uma variável. O mesmo modelo serve para qualquer sensor booleano/digital (botões, sensores de infravermelho, inclinação, etc) já que independentemente de como seus circuitos funcionam, seus /outputs/ elétricos são idênticos: alternância digitais (ou seja, sem valores intermediários) entre um valor mínimo (em geral 0V) e máximo (em geral 3.3V ou 5V).
- A escolha de um sensor digital então se torna uma questão não de eletrônica ou de programação, mas de /design de interação/. O que é mais adequado para minha aplicação?
  - Detalhe para pensar: alguns sensores, como o de inclinação, possuem /interações analógicas/ (existem infinitas posições que o sensor pode estar) porém /respostas digitais/ (em algum momento sua leitura muda instantaneamente de ~HIGH~ para ~LOW~). 

*** (Ainda) outros sensores digitais
- Hall effect sensor
  - https://en.wikipedia.org/wiki/Hall_effect_sensor
  - https://www.youtube.com/watch?v=4eqi0G7uY_4
- Reed switch
  - https://learn.sparkfun.com/tutorials/reed-switch-hookup-guide/all
  - https://www.youtube.com/watch?v=oum4zNXg7zs
- Sensor de toque capacitivo
  - https://learn.adafruit.com/adafruit-capacitive-touch-sensor-breakouts


** Transistor

- Ex.21 - transistorSwitch - https://www.tinkercad.com/things/eHFsPgfAZPg 
#+BEGIN_SRC c
int pinoBaseTrans = 9;

void setup()
{
  pinMode(pinoBaseTrans, OUTPUT);
}

void loop()
{
  digitalWrite(pinoBaseTrans, HIGH);
  delay(2000); 
  digitalWrite(pinoBaseTrans, LOW);
  delay(2000); 
}
#+END_SRC

- Pinos no Arduino conseguem alimentar apenas componentes com pouca demanda elétrica, como LEDs (lembrando: pinos no Arduino disponibilizam no máximo 5V). Para componentes maiores, como um motor, usa-se uma fonte de energia externa (9V ou 12V, por exemplo), e um transistor que servirá como /um interruptor para deixar passar ou não o fluxo dessa carga elétrica externa mais potente/.
  - Se interruptores (botões, sensores de inclinação, etc) podem ser entendidos como um cano com duas aberturas (por isso dois pinos em sensores como o de inclinação), por onde a água/energia flui, transistores são como canos que possuem uma válvula "no meio" (por isso os três pinos do transistor). A energia está sempre fluindo pelos pinos /coletor/ e /emissor/ do transistor, vindo da bateria de 9V. O que controlamos com o Arduino é o pino /base/, a "válvula", usando os 5V do pino digital.

- O código é como o Ex.1 - Blink: ligação de um pino digital interrompida por um ~delay()~. Porém agora o pino do Arduino não alimenta eletricamente o componente de forma direta, e sim "abre e fecha" o transistor, através do seu pino /base/.

- Sobre a conexão elétrica do transistor:
  - https://learn.adafruit.com/adafruit-arduino-lesson-13-dc-motors/transistors
  - https://vimeo.com/380456991

** ~for()~

- Documentação: https://www.arduino.cc/reference/en/language/structure/control-structure/for/
  - The ~for~ statement is used to repeat a block of statements enclosed in curly braces. An increment counter is usually used to increment and terminate the loop. The ~for~ statement is useful for any repetitive operation.

- Ex.22 - for() - https://www.tinkercad.com/things/gMTfF83LH2Y 
#+BEGIN_SRC c
void setup()
{
  Serial.begin(9600);
}

void loop()
{

  for(int i = 0; i < 10; i = i + 1)
  {
    Serial.print("Repeticao numero ");
    Serial.println(i);
    
    delay(1000);
  }
  
  Serial.println("Saiu do for()");
}
#+END_SRC

- Como ~if()~, existe um teste booleano. Porém agora com um /incremento/ ~i = i + 1~, que é avaliado sempre que o teste retornar ~true~.
- Sempre importante atentar quando/se o teste retornará ~false~. Caso o teste nunca seja falso, cria-se um loop infinito e a execução do código nunca sairá de dentro do bloco ~for()~.

- Ex.23 - forLED - https://www.tinkercad.com/things/0tUJmd9ZkhZ 
#+BEGIN_SRC c
int tempoDelay = 500;
int pinoLed_verde = 2;

void setup()
{
  pinMode(2, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  
  Serial.begin(9600);
}

void loop()
{

  for(int i = 4; i < 8; i = i + 1)
  {
    digitalWrite(i, HIGH);
    delay(tempoDelay);
    digitalWrite(i, LOW);
    delay(tempoDelay);
  }
  
  digitalWrite(pinoLed_verde, HIGH);
  delay(tempoDelay);
  digitalWrite(pinoLed_verde, LOW);
  delay(tempoDelay);
}
#+END_SRC

- Pergunta: por que não é necessário declarar variáveis para os pinos dos Leds vermelhos (pinos 4, 5, 6, 7)?

** TPC
- Construir uma linha de leds com acendimento em sequência (como Ex.23), e dois botões que aumentam e diminuem a velocidade do ciclo.
- Contruir circuito onde um transistor controla ligação de um motor (ou seja, com bateria de 9V), mas o controle do transistor é mais interativo do que somente "Blink com delay".


* AULA 10 - 05/MAI

** Esquemáticos eletrônicos

- Referências:
  - https://learn.sparkfun.com/tutorials/how-to-read-a-schematic/all
  - https://en.wikipedia.org/wiki/Electronic_symbol

-----

- *Ver arquivo esquematicosAula10.pdf*

-----

- /Experimento 4: desenhar esquemático do Experimento 2:  https://www.tinkercad.com/things/djHUEO9MFJB/


** TPC

- Desenhar esquemático do Experimento 1:  https://www.tinkercad.com/things/5b7xva4baRr 
  - Dica: o piezo também pode ser chamado de /buzzer/, ou pode ser desenhado também como uma simples coluna ("/loudspeaker/").
- Desenhar esquemático do Ex.20 - tiltSwitch:  https://www.tinkercad.com/things/9EcdwRmgLSX 
  - Dica: o sensor de inclinação também pode ser chamado de /mercury switch/.


* AULA 11 - 12/MAI

** Potenciômetros
- /Rocha, H - Introdução à Eletrônica Para Artistas - p.38/
  - "Potenciômetros são *resistores variáveis*"
  - Isso explica o seu símbolo esquemático.

- Ex.24 - potBateria - https://www.tinkercad.com/things/c2HKD5DXePg
- Ex.25 - RGB - https://www.tinkercad.com/things/lcEyQkjYKhN 

** ~analogRead()~
- Documentação - https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/
- Ex.26 - analogRead - https://www.tinkercad.com/things/59Ov4tOYDdk 
#+BEGIN_SRC c
int pinoSensor = A0;
int valorSensor;

void setup()
{
  pinMode(pinoSensor, INPUT); // pinos analógicos são configurados como INPUT automaticamente
                              // portanto essa linha é redundante
  Serial.begin(9600);
}

void loop()
{
  valorSensor = analogRead(pinoSensor);
  
  Serial.println(valorSensor);
  delay(100);
}
#+END_SRC

- Da documentação:
  - /"If the analog input pin is not connected to anything, the value returned by analogRead() will fluctuate based on a number of factors (e.g. the values of the other analog inputs, how close your hand is to the board, etc.)"/

- /Experimento 5: construa um circuito onde um potenciometro controla o tempo de piscagem de um LED/

** Analógico vs. Digital
- Perguntas:
  - De onde vem o valor 1023 retornado pela função ~analogRead()~?
  - Por que no Processing, ~fill(255)~ é o maior valor de cor?

- Conceitos importantes:
  - Resolução
  - Conversão

- Quantos pontos existem em uma reta?

** ~analogWrite()~
- Ex.27 - analogWrite - https://www.tinkercad.com/things/6wNJBK3QRP1 
#+BEGIN_SRC c
int pinoLed = 3;
int brilhoLed = 255;

void setup()
{
  pinMode(pinoLed, OUTPUT);
}

void loop()
{
  //experimente com outros valores para a variável brilhoLed
  //aqui vão algumas sugestões:
  
  //brilhoLed = 1;
  //brilhoLed = 50;
  //brilhoLed = 150;
  //brilhoLed = 257;
  brilhoLed = 300;
  
  analogWrite(pinoLed, brilhoLed);
  
  delay(10); //quando envolve conversão e pinos analógicos
             //convém deixar um delay curto ao fim do programa
  
}
#+END_SRC

- Perguntas:
  - Quais voltagens estão saíndo do pino 3?
  - Quais pinos usar com ~analogWrite()~?
    - PWM: https://www.arduino.cc/en/Tutorial/PWM

** RESUMÃO
- /Leituras/ de valores analógicos (como ler um potenciômetro) são feitas nos pinos ~A0~ até ~A5~
  - Essas leituras usam a função ~analogRead()~ e tem resolução /entre 0 e 1023/.

- /Escritas/ de valores analógicos (como controlar o brilho de um led) são feitas nos pinos digitais, mas somente nos pinos que suportam PWM.
  - Essas escritas usam a função ~analogWrite()~ e tem resolução /entre 0 e 255/.

** TPC
  - Crie (sem usar potenciômetros) um circuito que faça um fade-in e fade-out de um led.
    - Dica: talvez você precise iterar uma variável...

- TPC extra:
  - Controle o brilho de um led com um potenciômetro. Que problemas de ajustes de valores apareceram?


* AULA 12 - 19/MAI

** ~analogWrite()~ (uma vez mais...)
- Ex.28 - ledFade - https://www.tinkercad.com/things/1bHZQnLOvTd 
#+BEGIN_SRC c
int pinoLed = 9; // o pino 9 aceita PWM!
int brilhoLed = 0;

void setup()
{
  pinMode(pinoLed, OUTPUT);
  
  Serial.begin(9600);
}

void loop()
{
  brilhoLed = brilhoLed + 1;
  analogWrite(pinoLed, brilhoLed);
  
  Serial.println(brilhoLed);
  delay(10);
}
#+END_SRC

- Revisando: a função ~analogWrite()~ consegue /simular/ valores analógicos (em alguns pinos), dividindo os 5V do pino digital com uma /resolução máxima/ limitada à 256 valores diferentes (variando entre 0-255).

- Pergunta:
  - O que acontece então se escrevermos valores maiores que 255 como argumento de ~analogWrite()~?
  - Dica: a resposta está no Ex.16, Aula 08.

** ~map()~
- Documentação: https://www.arduino.cc/reference/en/language/functions/math/map/

- Ex.29 - potMap - https://www.tinkercad.com/things/fLKFN0q2qrb 

[[/aula12/exemplo29.png]]

#+BEGIN_SRC c
int pinoPot = A0;
int leituraPot;

void setup()
{
  pinMode(pinoPot, INPUT);
  
  Serial.begin(9600);
}

void loop()
{
  leituraPot = analogRead(pinoPot);
  Serial.print("valor original: ");
  Serial.println(leituraPot);
  
  int leituraPot_mapeado = map(leituraPot, 0, 1023, 0, 500); //pq 0, 500?
  Serial.print("valor mapeado: ");
  Serial.println(leituraPot_mapeado);
  
  delay(200);
}
#+END_SRC

- Revisando: ~analogRead()~ converte uma variação de 0-5V para valores entre 0-1023.
- ~map()~ escalona proporcionalmente um /âmbito de entrada/ para um /âmbito de saída/. 
  - É como reescrever os números em uma régua...

** ~analogRead()~ + ~analogWrite()~ + ~map()~

- Ex.30 - potFade - https://www.tinkercad.com/things/1LCSQownRtU 

[[/aula12/exemplo30.png]]

#+BEGIN_SRC c
int pinoPot = A0;
int pinoLed = 9;
int leituraPot;

void setup()
{
  pinMode(pinoPot, INPUT);
  pinMode(pinoLed, OUTPUT);
  
  Serial.begin(9600);
}

void loop()
{
  leituraPot = analogRead(pinoPot);
  
  leituraPot = map(leituraPot, 0, 1023, 0, 255);
  analogWrite(pinoLed, leituraPot);
  
  Serial.println(leituraPot);
  delay(10);
}
#+END_SRC

** TPC

- Construa o circuito da imagem, de modo que o valor máximo de rotação do motor seja aproximadamente 1000 RPM.
  - Possível solução: https://www.tinkercad.com/things/3bkbxhNegGF 

[[/aula12/tpc_aula12.png]]

- Construa um circuito e desenhe seu esquemático, que use pelo menos um potenciômetro e mais dois componentes.


* AULA 13 - 26/MAI

** LDR
- Ex.31 - LDR_1 - https://www.tinkercad.com/things/aLAjPfD1aBN 
[[/aula13/exemplo31.png]]
- LDR = Light Dependent Resistor, também às vezes chamado de /photoresistor/.
  - A resistência do LDR varia de acordo com a quantidade de luz que incide sobre o componente. 
  - Mais luz = menos resistência, menos luz = mais resistência.

- Ex.32 - LDR_2 - https://www.tinkercad.com/things/0AVtxSbidhW 
[[/aula13/exemplo32.png]]
#+BEGIN_SRC c
int pinoSensor = A0;
int valorSensor;

void setup()
{
  pinMode(pinoSensor, INPUT);
  Serial.begin(9600);
}

void loop()
{
  valorSensor = analogRead(pinoSensor); 
  Serial.println(valorSensor);
  
  delay(100);
}
#+END_SRC
Pergunta: por que esse valores mínimos e máximos no monitor serial? Qual a relação com a resolução dos pinos analógicos?

- /Experimento 6: construa um circuito onde, um LDR determina se um led acende ou não, a partir de um valor máximo de leitura./
  - Possível solução: https://www.tinkercad.com/things/gNj8rkrXpS4 

** ~while()~
- Documentação: https://www.arduino.cc/reference/en/language/structure/control-structure/while/

- Ex.33 - while() - https://www.tinkercad.com/things/8ecBdnfV3Rl 
#+BEGIN_SRC c
int contador = 1;

void setup()
{
  Serial.begin(9600);
}

void loop()
{ 
  while(contador < 10)
  {
    Serial.print("dentro do while. loop n.: ");
    Serial.println(contador);
    
    contador++;
    
    delay(500);
  }
  
  Serial.println("fora do while");
  delay(500);
}
#+END_SRC

- Como o ~for()~, é uma estrutura de controle de /loop/, porém com algumas diferenças de sintaxe e comportamento.

- Ex.34 - whileBug - https://www.tinkercad.com/things/c1lgQfIa192
  - Esse circuito /deveria/ se comportar da seguinte maneira: enquanto o botão está apertado, o monitor serial printa ~1~, juntamente da frase ~dentro do while~. Porém, existe aí um bug. Como consertar?
#+BEGIN_SRC c
int pinoBotao = 2;
int estadoBotao;

void setup()
{
  pinMode(pinoBotao, INPUT);
  Serial.begin(9600);
}

void loop()
{
  estadoBotao = digitalRead(pinoBotao);
  Serial.println(estadoBotao);
  
  while(estadoBotao == HIGH)
  {
    Serial.println("dentro do while");
  }
  
  Serial.println("fora do while");
  delay(100);
}
#+END_SRC

- Uma das principais diferença de funcionamento e uso entre ~for()~ e ~while()~: no loop ~for()~ temos que declarar, obrigatoriamente, a quantidade de repetições que queremos do nosso bloco de código; no ~while()~, não necessariamente.

# ** sensor temperatura
# ** transistor?

** TPC
- Refactorar TPC piano aula 07, agora usando ~while()~.


* AULA 14 - 02/JUN

** Temperatura
- Ex.35 - temperatura - https://www.tinkercad.com/things/dqXzAU4LDmM  
#+BEGIN_SRC c
int pinoSensor = A0;
int valorSensor;

void setup()
{
  pinMode(pinoSensor, INPUT);
  Serial.begin(9600);
}

void loop()
{
  valorSensor = analogRead(pinoSensor);
  
  Serial.println(valorSensor);
  delay(100);
}
#+END_SRC

- Regra Nᵒ0 da programação: ao se deparar com uma função que não conhece, consulte a documentação (aka RTFM...). Mas o que fazer com componentes eletrônicos desconhecidos?
  - Data sheets!

** Bibliotecas externas
- Diferenças entre tipos de motores: https://www.circuito.io/blog/arduino-motor-guide/
- Motores servo às vezes também são chamados /stepper motors/.
  - Símbolo esquemático: https://www.electrical-symbols.com/electric-electronic-symbols/electrical-motor-symbols.htm

Ex.36 - servoMotor - https://www.tinkercad.com/things/bh5c2ZGUYNx 
#+BEGIN_SRC c
#include <Servo.h>

int i = 0;

Servo servoPino9; //atenção para sintaxe!

void setup()
{
  servoPino9.attach(9);
}

void loop()
{
  servoPino9.write(i);
  i = i + 5;
  
  if (i > 180) // pq 180?
  {
  	i = 0;
  }
  
  delay(100);
}
#+END_SRC

- Documentação da biblioteca Servo: https://www.arduino.cc/en/Reference/Servo

- Bibliotecas externas (criadas por terceiros) adicionam funcionalidades extras à uma linguagens de programação ou software.
  - Muitas vezes usadas para permitir a realização de tarefas especializadas e/ou adicionar suporte para novas funcionalidades não existentes quando do design original da linguagem.

- A utilização de bibliotecas externas em linguagens como Arduino e Processing utiliza uma sintaxe que advém de um paradigma de programação chamado /Programação Orientada a Objeto/ (OOP).
- OPP é um tópico bastante extenso. Para esse exemplo, precisamos nos concentrar em:
  - Importar a biblioteca ao início do códico com ~#include <Servo.h>~;
  - Como ~Servo servoPino9~ declara uma /variável do tipo Servo/ (cuja nomenclatura correta em OPP é /instanciar um objeto da classe Servo/);
  - Nova sintaxe em ~servoPino9.attach()~ e ~servoPino9.write()~, onde usamos /dot notation/ para utilizar funções sobre a variável ~servoPino9~ (essas funções, em OPP por vezes são chamadas de /métodos/).
  - Onde essa sintaxe já apareceu?

- Pergunta: por que o servo não volta para posição inicial após o primeiro ciclo?

- /Experimento 7: crie um circuito onde a posição de um servo é controlada por um potenciômetro./

** Transistor (como controlador analógico)
- Ex.37 - transistorAnalogico - https://www.tinkercad.com/things/gvHimiPb4Tx 
#+BEGIN_SRC c
int pinoBaseTrans = 9;
int i = 0;

void setup()
{
  pinMode(pinoBaseTrans, OUTPUT);
  Serial.begin(9600);
}

void loop()
{
  i++;
  analogWrite(pinoBaseTrans, i%255); // % -> "modulo operator"
  
  Serial.println(i);
  delay(50);
}
#+END_SRC

** Operador de módulo: ~%~
- Documentação: https://www.arduino.cc/en/pmwiki.php?n=Reference/Modulo
- Como um relógio de ponteiros:
  - 13h = 1h (~13 % 12 = 1~)
  - 14h = 2h (~14 % 12 = 2~)
- Como contar usando os dedos de apenas uma mão:
  - 7 unidades = 2 dedos (~7 % 5 = 2~)
  - 8 unidades = 3 dedos (~8 % 5 = 3~)
  - 13 unidades = 3 dedos (~13 % 5 = 3~)
